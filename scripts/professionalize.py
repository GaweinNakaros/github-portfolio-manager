#!/usr/bin/env python3
"""
GitHub Repository Professionalization Script
Automatiza la profesionalizaci√≥n de repositorios acad√©micos
"""

import json
import os
from pathlib import Path
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel

console = Console()

class RepoProfessionalizer:
    def __init__(self):
        self.templates_dir = Path('templates')
        self.audit_data = None
        
    def load_latest_audit(self):
        """Carga la auditor√≠a m√°s reciente"""
        audit_dir = Path('data/audits')
        if not audit_dir.exists():
            console.print("‚ùå No se encontraron auditor√≠as previas", style="red")
            return False
        
        # Buscar el archivo m√°s reciente
        audit_files = list(audit_dir.glob('audit_*.json'))
        if not audit_files:
            console.print("‚ùå No se encontraron archivos de auditor√≠a", style="red")
            return False
        
        latest_file = max(audit_files, key=os.path.getctime)
        
        try:
            with open(latest_file, 'r', encoding='utf-8') as f:
                self.audit_data = json.load(f)
            console.print(f"‚úÖ Cargada auditor√≠a: {latest_file.name}", style="green")
            return True
        except Exception as e:
            console.print(f"‚ùå Error cargando auditor√≠a: {e}", style="red")
            return False
    
    def select_repository(self):
        """Permite seleccionar un repositorio para profesionalizar"""
        if not self.audit_data:
            return None
        
        # Filtrar repositorios acad√©micos y sin clasificar
        candidates = []
        for repo in self.audit_data['repositories']:
            if "üéì" in repo['classification'] or "üìÅ" in repo['classification']:
                candidates.append(repo)
        
        if not candidates:
            console.print("‚ùå No hay repositorios candidatos para profesionalizar", style="yellow")
            return None
        
        console.print("\nüéØ Repositorios candidatos para profesionalizaci√≥n:")
        for i, repo in enumerate(candidates, 1):
            console.print(f"{i}. {repo['name']} - {repo['classification']}")
        
        try:
            choice = int(Prompt.ask("Selecciona un repositorio", default="1"))
            if 1 <= choice <= len(candidates):
                return candidates[choice - 1]
        except ValueError:
            console.print("‚ùå Selecci√≥n inv√°lida", style="red")
        
        return None
    
    def create_professional_readme(self, repo):
        """Crea un README profesional para el repositorio"""
        template_path = self.templates_dir / 'README_template.md'
        
        if not template_path.exists():
            console.print("‚ùå Plantilla README no encontrada", style="red")
            return False
        
        # Leer plantilla
        with open(template_path, 'r', encoding='utf-8') as f:
            template = f.read()
        
        # Solicitar informaci√≥n del usuario
        console.print(f"\nüìù Configurando README para: {repo['name']}")
        
        project_name = repo['name']
        description = Prompt.ask("Descripci√≥n del proyecto", default=repo.get('description', ''))
        
        # Detectar tecnolog√≠as basadas en el lenguaje
        language = repo.get('language', 'N/A')
        tech_suggestions = {
            'Python': {'backend': 'Python, Flask/Django', 'frontend': 'HTML, CSS, JavaScript'},
            'HTML': {'frontend': 'HTML, CSS, JavaScript', 'backend': 'N/A'},
            'CSS': {'frontend': 'HTML, CSS, JavaScript', 'backend': 'N/A'},
            'JavaScript': {'frontend': 'JavaScript, React/Vue', 'backend': 'Node.js'},
            'PHP': {'backend': 'PHP', 'frontend': 'HTML, CSS, JavaScript'}
        }
        
        frontend_tech = Prompt.ask("Tecnolog√≠as Frontend", 
                                  default=tech_suggestions.get(language, {}).get('frontend', 'HTML, CSS, JavaScript'))
        backend_tech = Prompt.ask("Tecnolog√≠as Backend", 
                                 default=tech_suggestions.get(language, {}).get('backend', 'N/A'))
        database = Prompt.ask("Base de datos", default="SQLite/MySQL")
        
        # Comandos de instalaci√≥n y ejecuci√≥n
        install_commands = self.get_install_commands(language)
        run_commands = self.get_run_commands(language)
        
        # Reemplazar placeholders
        readme_content = template.replace('{PROJECT_NAME}', project_name)
        readme_content = readme_content.replace('{DESCRIPTION}', description)
        readme_content = readme_content.replace('{FRONTEND_TECH}', frontend_tech)
        readme_content = readme_content.replace('{BACKEND_TECH}', backend_tech)
        readme_content = readme_content.replace('{DATABASE}', database)
        readme_content = readme_content.replace('{OTHER_TECH}', f"{language}, Git, GitHub")
        readme_content = readme_content.replace('{INSTALL_COMMANDS}', install_commands)
        readme_content = readme_content.replace('{RUN_COMMANDS}', run_commands)
        readme_content = readme_content.replace('{YOUR_NAME}', "Tu Nombre")
        readme_content = readme_content.replace('{YOUR_EMAIL}', "tu.email@ejemplo.com")
        readme_content = readme_content.replace('{YOUR_LINKEDIN}', "https://linkedin.com/in/tu-perfil")
        readme_content = readme_content.replace('{YOUR_PORTFOLIO}', "https://tu-portfolio.com")
        
        # Agregar caracter√≠sticas autom√°ticas
        features = self.generate_features(repo, language)
        for i, feature in enumerate(features, 1):
            readme_content = readme_content.replace(f'{{FEATURE_{i}}}', feature)
        
        # Guardar README
        output_dir = Path('output') / project_name
        output_dir.mkdir(parents=True, exist_ok=True)
        
        readme_path = output_dir / 'README.md'
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        console.print(f"‚úÖ README generado: {readme_path}", style="green")
        return True
    
    def get_install_commands(self, language):
        """Genera comandos de instalaci√≥n seg√∫n el lenguaje"""
        commands = {
            'Python': '# Instalar dependencias\npip install -r requirements.txt',
            'JavaScript': '# Instalar dependencias\nnpm install',
            'PHP': '# Instalar dependencias\ncomposer install',
            'HTML': '# No requiere instalaci√≥n especial\n# Abrir index.html en navegador'
        }
        return commands.get(language, '# Seguir instrucciones espec√≠ficas del proyecto')
    
    def get_run_commands(self, language):
        """Genera comandos de ejecuci√≥n seg√∫n el lenguaje"""
        commands = {
            'Python': '# Ejecutar aplicaci√≥n\npython app.py\n# o\npython manage.py runserver',
            'JavaScript': '# Ejecutar en modo desarrollo\nnpm start\n# o\nnpm run dev',
            'PHP': '# Ejecutar servidor local\nphp -S localhost:8000',
            'HTML': '# Abrir en navegador\n# Usar Live Server en VS Code'
        }
        return commands.get(language, '# Seguir instrucciones del proyecto')
    
    def generate_features(self, repo, language):
        """Genera caracter√≠sticas autom√°ticas basadas en el tipo de proyecto"""
        base_features = [
            "Interfaz intuitiva y responsive",
            f"Desarrollado en {language}",
            "C√≥digo limpio y documentado"
        ]
        
        # Agregar caracter√≠sticas espec√≠ficas seg√∫n el nombre del repo
        name_lower = repo['name'].lower()
        if 'control' in name_lower or 'stock' in name_lower:
            base_features.extend([
                "Gesti√≥n de inventario en tiempo real",
                "Sistema de alertas de stock bajo",
                "Reportes y estad√≠sticas"
            ])
        elif 'web' in name_lower:
            base_features.extend([
                "Dise√±o responsive para todos los dispositivos",
                "Optimizaci√≥n SEO",
                "Carga r√°pida y eficiente"
            ])
        elif any(word in name_lower for word in ['comision', 'clase', 'curso']):
            base_features.extend([
                "Material educativo estructurado",
                "Ejercicios pr√°cticos incluidos",
                "Ejemplos de c√≥digo comentados"
            ])
        
        return base_features[:3]  # Retornar solo las primeras 3
    
    def create_project_structure(self, repo):
        """Crea estructura de proyecto profesional"""
        project_name = repo['name']
        output_dir = Path('output') / project_name
        
        # Crear directorios est√°ndar
        directories = [
            'src',
            'docs',
            'tests',
            'assets/css',
            'assets/js',
            'assets/images',
            'config'
        ]
        
        for directory in directories:
            dir_path = output_dir / directory
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # Crear archivos b√°sicos
        files_to_create = {
            'src/main.py': '#!/usr/bin/env python3\n"""Archivo principal del proyecto"""\n\nif __name__ == "__main__":\n    print("¬°Hola mundo!")\n',
            'requirements.txt': '# Dependencias del proyecto\n# requests>=2.25.1\n# flask>=2.0.0\n',
            'LICENSE': 'MIT License\n\nCopyright (c) 2025\n\n...',
            '.gitignore': '# Python\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv/\nvenv/\n.venv/\n.env\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\nThumbs.db\n',
            'docs/CONTRIBUTING.md': '# Gu√≠a de Contribuci√≥n\n\n## C√≥mo contribuir\n\n1. Fork el proyecto\n2. Crea una rama para tu feature\n3. Realiza tus cambios\n4. Env√≠a un pull request\n'
        }
        
        for file_path, content in files_to_create.items():
            full_path = output_dir / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
        
        console.print(f"‚úÖ Estructura de proyecto creada en: {output_dir}", style="green")

def main():
    professionalizer = RepoProfessionalizer()
    
    console.print(Panel.fit(
        "üöÄ GitHub Repository Professionalizer\n"
        "Convierte repositorios acad√©micos en proyectos profesionales",
        title="Professional Portfolio Manager"
    ))
    
    # Cargar auditor√≠a
    if not professionalizer.load_latest_audit():
        return
    
    # Seleccionar repositorio
    selected_repo = professionalizer.select_repository()
    if not selected_repo:
        return
    
    console.print(f"\nüéØ Profesionalizando: {selected_repo['name']}")
    
    # Confirmar proceso
    if not Confirm.ask("¬øContinuar con la profesionalizaci√≥n?"):
        console.print("‚ùå Operaci√≥n cancelada", style="yellow")
        return
    
    # Crear README profesional
    if professionalizer.create_professional_readme(selected_repo):
        # Crear estructura de proyecto
        professionalizer.create_project_structure(selected_repo)
        
        console.print(f"\n‚úÖ ¬°Repositorio {selected_repo['name']} profesionalizado exitosamente!", style="green bold")
        console.print("\nüìã Pr√≥ximos pasos:")
        console.print("1. Revisar y personalizar el README generado")
        console.print("2. Agregar el c√≥digo fuente a la carpeta src/")
        console.print("3. Completar la documentaci√≥n en docs/")
        console.print("4. Agregar tests en la carpeta tests/")
        console.print("5. Publicar en GitHub con la nueva estructura")

if __name__ == "__main__":
    main()
